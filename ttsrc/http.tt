| HttpServer |;

HttpServer = Object createWith:
{
    "createWithSocket:", [ :createWithSocket: |
        | inst |;
        inst = this getParent createWith:
        {
            "serverSocket", createWithSocket,
            "handlers", Map new
        };
        inst setParent: this;

        inst registerHandler: (HttpHandler createForPath: "404");
        inst
    ],

    "address:port:", [ :address: :port: |
        |inst|;
        inst = this createWithSocket: (TCPServerSocket openAddress: address port: port);
        inst
    ],

    "start", [ :start |
        | server |;
        server = this;
        Loop
            repeat:
            [
                Loop repeat:
                [
                    | client |;
                    client = serverSocket accept;
                    client isOK ifTrue:
                    [
                        System startThread: [ server handleClient: client ]
                    ]
                ]
                times: 1024
            ]
            times: 1024
    ],

    "handleClient:", [ :handleClient: |
        | end fullRequest lastLine httpRequest |;
        Out writeLine: "Got client";
        end = False;
        fullRequest = "";
        While
            isTrue: [end not]
            do:
            [
                | line |;
                line = handleClient readLine;
				handleClient readLine;
                (line trim equals: "")
                    ifFalse: [ fullRequest = fullRequest append: (line append: "\n") ]
                    ifTrue: [end = True];
                (fullRequest length greaterThan: 32768) ifTrue: [end = True]
            ];

		httpRequest = HttpRequest fromHttpHeader: fullRequest;

		| handler httpResponse |;
		handler = handlers getKey: (httpRequest getPath);
		handler isNil ifTrue: [ handler = handlers getKey: "404"];
		httpResponse = handler createResponseForRequest: httpRequest;

        handleClient writeLine: (httpResponse getFullResponse);
		handleClient writeLine: "\n<br />";
		handleClient writeLine: "\n<br />";
		handleClient writeLine: "This page was generated by the TinyTalk VM.";
        handleClient close
    ],

    "registerHandler:", [ :registerHandler: |
        handlers addKey: (registerHandler getPath) value: registerHandler
    ]
};

| HttpUtil HttpRequest HttpResponse HttpHandler |;

HttpUtil = Exec execFileName: "ttsrc/http_util.tt";
HttpRequest = Exec execFileName: "ttsrc/http_request.tt";
HttpResponse = Exec execFileName: "ttsrc/http_response.tt";
HttpHandler = Exec execFileName: "ttsrc/http_handler.tt";

Env installGlobalVarName: "HttpUtil" withValue: HttpUtil;
Env installGlobalVarName: "HttpRequest" withValue: HttpRequest;
Env installGlobalVarName: "HttpResponse" withValue: HttpResponse;
Env installGlobalVarName: "HttpHandler" withValue: HttpHandler;
Env installGlobalVarName: "HttpServer" withValue: HttpServer;

HttpServer

