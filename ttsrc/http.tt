| HttpServer HttpHandler HttpRequest HttpResponse |;

HttpRequest = Object createWith:
{
    "new", [ :new |
        | res |;
        res = this getParent createWith:
        {
            "path", nil,
            "host", nil
        };
        res setParent: this;
        res
    ],

    "setPath:", [ :setPath: |
        path = setPath
    ],
    "getPath", [ :getPath |
        path
    ],

    "setHost:", [ :setHost: |
        host = setHost
    ],
    "getHost", [ :getHost |
        host
    ]
};

HttpResponse = Object createWith:
{
    "new", [ :new |
        | res |;
        res = this getParent createWith:
        {
            "output", nil
        };
        res setParent: this;
        res
    ],

    "setOutput:", [ :setOutput: |
        output = setOutput
    ],
    "getOutput", [ :getOutput |
        output
    ]
};

HttpHandler = Object createWith:
{
    "createForPath:", [ :createForPath: |
        | inst |;
        inst = this getParent createWith:
        {
            "path", createForPath
        };
        inst setParent: this;
        inst
    ],

    "createResponseForRequest:", [ :createResponseForRequest: |
        | req resp |;
        req = createResponseForRequest;
        resp = HttpResponse new;
        resp setOutput: "Default handler";
        resp
    ],

    "getPath", [ :getPath |
        path
    ]
};

HttpServer = Object createWith:
{
    "createWithSocket:", [ :createWithSocket: |
        | inst |;
        inst = this getParent createWith:
        {
            "serverSocket", createWithSocket,
            "handlers", Map new
        };
        inst setParent: this;

        inst registerHandler: (HttpHandler createForPath: "/");
        inst
    ],

    "address:port:", [ :address: :port: |
        |inst|;
        inst = this createWithSocket: (TCPServerSocket openAddress: address port: port);
        inst
    ],

    "start", [ :start |
        | server |;
        server = this;
        Loop
            repeat:
            [
                Loop repeat:
                [
                    | client |;
                    client = serverSocket accept;

                    System startThread: [server handleClient: client]
                ]
                times: 1024
            ]
            times: 1024
    ],

    "handleClient:", [ :handleClient: |
        | end fullRequest lastLine |;
        Out writeLine: "Got client";
        end = False;
        fullRequest = "";
        lastLine = "";
        While
            isTrue: [end not]
            do:
            [
                | line |;
                line = handleClient readLine;
                (line trim equals: "")
                    ifFalse: [ fullRequest = fullRequest append: (line append: "\n") ]
                    ifTrue:
                    [
                        (lastLine equals: "")
                            ifTrue: [ end = True ];
                            fullRequest = fullRequest append: "\n"
                    ];
                lastLine = line;
                (fullRequest length greaterThan: 32768) ifTrue: [end = True]
            ];

        handleClient readLine;
        Out writeLine: "full request:";
        Out writeLine: fullRequest;
        handleClient writeLine: "Hello from TinyTalk! :)";
        handleClient close
    ],

    "registerHandler:", [ :registerHandler: |
        handlers addKey: (registerHandler getPath) value: registerHandler
    ]
};

HttpServer
