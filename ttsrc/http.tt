| HttpServer HttpHandler HttpRequest HttpResponse |;

HttpRequest = Object createWith:
{
    "new", [ :new |
        | res |;
        res = this getParent createWith:
        {
            "path", nil,
            "host", nil
        };
        res setParent: this;
        res
    ],

	"fromHttpHeader:", [ :fromHttpHeader: |
		| lines argsStr path inst |;
		lines = fromHttpHeader splitBy: "\n";
		lines do: [ :each: |
			each = each trim toLower;
			(each startsWith: "get")
				ifTrue:
				[
					|parts|;
					parts = each splitBy: "get";
					parts = (parts at: 0) trim splitBy: " ";
					parts = (parts at: 0) splitBy: "?";
					path = parts at: 0;
					(parts size greaterThan: 1)
						ifTrue: [ argsStr = parts at: 1 ]
						ifFalse: [ argsStr = "" ];
					Out writeLine: "Got the path:";
					Out writeLine: path;
					Out writeLine: "Got the args:";
					Out writeLine: argsStr
				]
		];
		inst = this new;
		inst setPath: path;
		inst

	],

    "setPath:", [ :setPath: |
        path = setPath
    ],

    "getPath", [ :getPath |
        path
    ],

    "setHost:", [ :setHost: |
        host = setHost
    ],
    "getHost", [ :getHost |
        host
    ]
};

HttpResponse = Object createWith:
{
    "new", [ :new |
        | res |;
        res = this getParent createWith:
        {
            "output", nil
        };
        res setParent: this;
        res
    ],

    "setOutput:", [ :setOutput: |
        output = setOutput
    ],
    "getOutput", [ :getOutput |
        output
    ],

	"getFullResponse", [ :getFullResponse |
		| full |;
		full = "HTTP/1.x 200 OK\r\n";
		full = full append: "Connection: close\r\n";
		full = full append: "Content-Type: text/html; charset=UTF-8\r\n";
		full = full append: "\r\n";
		full = full append: (this getOutput);
		full
	]
};

HttpHandler = Object createWith:
{
    "createForPath:", [ :createForPath: |
        | inst |;
        inst = this getParent createWith:
        {
            "path", createForPath
        };
        inst setParent: this;
        inst
    ],

    "createResponseForRequest:", [ :createResponseForRequest: |
        | req resp |;
        req = createResponseForRequest;
        resp = HttpResponse new;
        resp setOutput: ("404 - page '" append: (createResponseForRequest getPath append: "' not found"));
        resp
    ],

    "getPath", [ :getPath |
        path
    ]
};

HttpServer = Object createWith:
{
    "createWithSocket:", [ :createWithSocket: |
        | inst |;
        inst = this getParent createWith:
        {
            "serverSocket", createWithSocket,
            "handlers", Map new
        };
        inst setParent: this;

        inst registerHandler: (HttpHandler createForPath: "404");
        inst
    ],

    "address:port:", [ :address: :port: |
        |inst|;
        inst = this createWithSocket: (TCPServerSocket openAddress: address port: port);
        inst
    ],

    "start", [ :start |
        | server |;
        server = this;
        Loop
            repeat:
            [
                Loop repeat:
                [
                    | client |;
                    client = serverSocket accept;
                    client isOK ifTrue:
                    [
                        System startThread: [ server handleClient: client ]
                    ]
                ]
                times: 1024
            ]
            times: 1024
    ],

    "handleClient:", [ :handleClient: |
        | end fullRequest lastLine httpRequest |;
        Out writeLine: "Got client";
        end = False;
        fullRequest = "";
        While
            isTrue: [end not]
            do:
            [
                | line |;
                line = handleClient readLine;
				handleClient readLine;
                (line trim equals: "")
                    ifFalse: [ fullRequest = fullRequest append: (line append: "\n") ]
                    ifTrue: [end = True];
                (fullRequest length greaterThan: 32768) ifTrue: [end = True]
            ];

        Out writeLine: "full request:";
        Out writeLine: fullRequest;
		httpRequest = HttpRequest fromHttpHeader: fullRequest;

		| handler httpResponse |;
		handler = handlers getKey: (httpRequest getPath);
		handler isNil ifTrue: [ handler = handlers getKey: "404"];
		Out writeLine: "Got handler for key:";
		Out writeLine: (httpRequest getPath);
		Out writeLine: "Got handler:";
		Out writeLine: (handler toString);
		httpResponse = handler createResponseForRequest: httpRequest;

        handleClient writeLine: (httpResponse getFullResponse);
		handleClient writeLine: "\n<br />";
		handleClient writeLine: "\n<br />";
		handleClient writeLine: "This page was generated by the TinyTalk VM.";
        handleClient close
    ],

    "registerHandler:", [ :registerHandler: |
        handlers addKey: (registerHandler getPath) value: registerHandler
    ]
};

HttpServer
